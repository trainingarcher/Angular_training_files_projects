
		// Angular

	What is Angular..??
	-------------------

	Angular is a platform and leading front-end development framework framework for building single-page client applications using HTML and TypeScript. Angular is written in TypeScript. It implements core and optional functionality as a set of TypeScript libraries that you import into your applications.

	Angular is a development platform, built on TypeScript.  It is maintained mainly by Google and a community (Initial release	October 20, 2010).

	As a platform, Angular includes:

	- A component-based framework for building scalable web applications

	- A collection of well-integrated libraries that cover a wide variety of features, including routing, forms management, client-server communication, and more
	
	- A suite of developer tools to help you develop, build, test, and update your code

	- It was built with the Model-View-Controller concept in mind, though authors of the framework often called it “Model-View-*” or even “Model-View-Whatever”.

	//----------------------------------------------------------------------------

	Advantages of Angular:
	---------------------

		- Angular presents you not only the tools but also design patterns to build your project in a maintainable way.

		- It’s JavaScript, but better: Angular is built with TypeScript, which in turn relies on JS ES6.

		- No need to reinvent the bicycle:  With Angular, you already have lots of tools to start crafting the application right away. 

		- Components are decoupled. Angular strived to remove tight coupling between various components of the application.

		- Testing is at the heart. Angular is meant to be thoroughly tested and it supports both unit and end-to-end testing with tools like Jasmine and Protractor.

		- Angular is mobile and desktop-ready, meaning you have one framework for multiple platforms.

		- Angular is actively maintained and has a large community and ecosystem. You can find lots of materials on this framework as well as many useful third-party tools.

	//--------------------------------------------------------------------------

	Angular Features
	================

		- Angular supports multiple platforms: Desktop applications, Native applications, Progressive web applications

		- High Speed, Ultimate Performance: Universal support, Code splitting, Code generation

		- Productivity: Powerful templates, IDEs, Angular CLI

		- Full Stack Development:  Testing, Animation Support, Accessibility

		 It provides full stack development along with Node.js, Express.js, and MongoDB.



//-----------------------------------------------------------------------------------------------------


			- History and different versions of Angular

				-  first version of Angular was Angular1.0 (also known as AngularJS)
				   which was released in 2010.

				- Angular 2.0 was first introduced in October 2014. It was a complete rewrite of AngularJS

				- Angular 4 version was announced on 13 December 2016

				- Angular5 version was released on 1 Nov, 2017

				- Angular 7 released on October 18, 2018

				For more. https://github.com/angular/angular/blob/master/CHANGELOG.md


//--------------------------------------------------------------------------------------------------

	Environment Setup
	==================

		- Install VS Code or JetBrains WebStorm

		- Install NodeJs ( https://nodejs.org/en/ )

			open command prompt and run following command to check the installation is successful or Not

			C:\Users\archer>node -v
				v14.18.1

		- Visit the https://angular.io/resources

		- Install the Angular CLI

				Angular CLI to create projects, generate application and library code, and perform a variety of ongoing development tasks such as testing, bundling, and deployment.

				C:\Users\archer>npm install -g @angular/cli

		- Create a workspace and First Application (Created F:\angular)

				F:\angular>ng new first-ng-app

				 - hit N to Routing
				 - CSS hit enter key

		- After compliation run dir commad to see the files


			F:\angular>dir
			 Volume in drive F has no label.
			 Volume Serial Number is E0E2-42AB

			 Directory of F:\angular

			27-10-2021  01:33    <DIR>          .
			27-10-2021  01:33    <DIR>          ..
			27-10-2021  01:38    <DIR>          first-ng-app

		- open project dir and run code . to open the project in the VS Code

		- Run the project using the command

				F:\angular\first-ng-app>ng serve --open

		- To See information abount the Workspace and project file structure just visit 

			https://angular.io/guide/file-structure

//-------------------------------------------------------------------------------------------------------


		Why does Angular need Node.js?
		----------------------------------

		Angular does not need node.js directly. Node js is used for all the build and development tools.

	It is not mandatory to use node.js for developing angular application. You can very well go ahead without node.js for developing angular application but it would not be wise to do so. Let me explain you some of the reasons how node.js makes angular app development process easier for us:

	Node allows you to spin up a lightweight web server to host your application locally in your system.
	NPM (Node Package Manager) comes with node.js by default. NPM allows you to manage your dependencies. So, you don’t have to worry for operations like adding a dependency, removing some, updating your package.json.

	Third and the most important, npm gives you angular cli or ng cli(angular command line interface) . Angular CLI is a great tool for scaffolding your application. So, you don’t need to write boilerplates manually.

	Angular recommends the use of TypeScript. Now, your browser does not understand TypeScript. It needs to be transpiled*** to JavaScript. Also, you need to bundle your js files and stylesheets together with the html doc so as to get the web app CLI which is ready to be hosted. Angular CLI helps you to do all these behind the scene. By default, ng cli uses webpack for bundling your application and is very helpful for beginners who have just jumped into web development with angular as it abstracts such complexities.

		*** Transpiling is a specific term for taking source code written in one language and transforming into another language

	//-------------------------------------------------------------------------------------------------

		// NPM - Node Package Manager
		-------------------------------

		Node Package Manager (NPM) is a command line tool that installs, updates or uninstalls Node.js packages in your application. It is also an online repository for open-source Node.js packages. The node community around the world creates useful modules and publishes them as packages in this repository.

			NPM is included with Node.js installation. After you install Node.js, verify NPM installation by writing the following command in terminal or command prompt.

				c:\> npm -v



			There are many things that npm does.

				- npm manages downloads of dependencies of your project.

				- Installs a single package

				- Updating is also made easy, by running npm update

				- In addition to plain downloads, npm also manages versioning.

				- Running Tasks: The package.json file supports a format for specifying command line    tasks that can be run by using npm run <task-name>

	//---------------------------------------------------------------------------------------------------

		// What is the use of polyfills.ts file in Angular?

		Angular is built on the latest standards of the web platform. Targeting such a wide range of browsers is challenging because they do not support all features of modern browsers.

		You can compensate them by loading polyfill scripts on the host web page that implement missing features in JavaScript.

		Some features of angular may require additional polyfills

		For ex. Animation library relies on the standard web animation API, which is only available in chrome and Firefox today. You will need a polyfill to use animations in other browsers.


	//----------------------------------------------------------------------------------------------------

		// What is module bundler?


		Module bundlers are tools frontend developers used to bundle JavaScript modules into a single JavaScript files that can be executed in the browser.

		Examples of modern module bundlers are: webpack, rollup, fusebox, parcel, etc.

		Module bundler is required because:

		Browser does not support module system, although this is not entirely true nowadays
		It helps you manage the dependency relationship of your code, it will load modules in dependency order for you.
		It helps you to load your assets in dependency order, image asset, css asset, etc.


	//------------------------------------------------------------------------------------------------

		// What Is Lint Code? And Why Is Linting Important?

		Everyone knows that programming errors are bad. Some errors cause glitches that frustrate users. Others compromise the safety and security of a critical system. No matter what type of program you’re developing, avoiding these errors is important. That’s why many development teams rely on linting.

		Linting is the automated checking of your source code for programmatic and stylistic errors. This is done by using a lint tool (otherwise known as linter). A lint tool is a basic static code analyzer.

		Linting is important to reduce errors and improve the overall quality of your code. Using lint tools can help you accelerate development and reduce costs by finding errors earlier.


	// ------------------------------------------------------------------------

		TypeScript In Depth: 

	// ----------------------------------------------------------------------

			// Default Folder Structure 


		1. node_module: 
			- Provides npm packages to the entire workspace. Workspace-wide node_modules dependencies are visible to all projects.
			- This is the folder where all modules and libraries resides
			- Add/Remove the module packages
			- We will not touch this folder for development purpose

		2. src:
			- This is the main work area/ app code resides inside this folder
			- Source files for the root-level application project.
				- app : Contains the component files in which your application logic and data are defined.
					- app.component : file curresponds to component
					- app.module.ts : It means this is module (collection of component, services, pipe etc)
					- app.component.spec.ts : These are unit test scripts
					- app.component.css : css file for perticular component.
					- app.component.html :  html file for perticular component

				- assets : Contains image and other asset files to be copied as-is when you build your application.
				- environments: 
						Contains build configuration options for particular target environments. By default there is an unnamed standard development environment and a production ("prod") environment. You can define additional target environment configurations.
				- favicon.ico : An icon to use for this application in the bookmark bar.

				- index.html	
						The main HTML page that is served when someone visits your site. The CLI automatically adds all JavaScript and CSS files when building your app, so you typically don't need to add any <script> or <link> tags here manually.

				- main.ts	
						The main entry point for your application. Compiles the application with the JIT compiler and bootstraps the application's root module (AppModule) to run in the browser. 

				- polyfills.ts : Provides polyfill scripts for browser support. (make backward compatable)

				- styles.sass	
						Lists CSS files that supply styles for a project. The extension reflects the style preprocessor you have configured for the project.

				- test.ts	
						The main entry point for your unit tests, with some Angular-specific configuration. You don't typically need to edit this file.

		3. .browserslistrc
				 Share target browsers between different front-end tools, like Autoprefixer, Stylelint and babel-preset-env

		4. .editorconfig: 
				EditorConfig helps maintain consistent coding styles for multiple developers working on the same project across various editors and IDEs. The EditorConfig project consists of a file format for defining coding styles and a collection of text editor plugins that enable editors to read the file format and adhere to defined styles. EditorConfig files are easily readable and they work nicely with version control systems.


		5. .gitignore
				Specifies intentionally untracked files that Git should ignore.

		6. angular.json
				CLI configuration defaults for all projects in the workspace, including configuration options for build, serve, and test tools that the CLI uses, such as TSLint, Karma, and Protractor

		7. karma.conf.js: Karma Runner for out unit test scripts.

		8. package-lock.json
				Provides version information for all packages installed into node_modules by the npm client. 

		9. package.json
				Configures npm package dependencies that are available to all projects in the workspace. 

		10. README.md
				Introductory documentation for the root application.

		11. tsconfig.app.json
				Application-specific TypeScript configuration, including TypeScript and Angular template compiler options.

		12. tsconfig.json
				The base TypeScript configuration for projects in the workspace. All other configuration files inherit from this base file.

		13. tsconfig.spec.json
				TypeScript configuration for the application tests

		14. tslint.json	
				Application-specific TSLint configuration.

	// ------------------------------------------------------------------