
	// Angular

	What is Angular..??
	-------------------

		Angular is a platform and leading front-end development framework for building single-page client applications using HTML and TypeScript. Angular is written in TypeScript. It implements core and optional functionality as a set of TypeScript libraries that you import into your applications.

		Angular is a development platform, built on TypeScript.  It is maintained mainly by Google and a community (Initial release	October 20, 2010).

		
		As a platform, Angular includes:

			- A component-based framework for building scalable web applications

			- A collection of well-integrated libraries that cover a wide variety of features, including routing, forms management, client-server communication, and more

			- A suite of developer tools to help you develop, build, test, and update your code

			- It was built with the Model-View-Controller concept in mind, though authors of the framework often called it “Model-View-*” or even “Model-View-Whatever”.

		//----------------------------------------------------------------------------

			Advantages of Angular:
			---------------------

		- Angular presents you not only the tools but also design patterns to build your project in a maintainable way.

		- It’s JavaScript, but better: Angular is built with TypeScript, which in turn relies on JS ES6.

		- No need to reinvent the bicycle:  With Angular, you already have lots of tools to start crafting the application right away. 

		- Testing is at the heart. Angular is meant to be thoroughly tested and it supports both unit and end-to-end testing with tools like Jasmine and Protractor.

		- Angular is mobile and desktop-ready, meaning you have one framework for multiple platforms.

		- Angular is actively maintained and has a large community and ecosystem. You can find lots of materials on this framework as well as many useful third-party tools.

		//----------------------------------------------------------------------------------

	Angular Features
	================

		- Angular supports multiple platforms: Desktop applications, Native applications, Progressive web applications

		- High Speed, Ultimate Performance: Universal support, Code splitting, Code generation

		- Productivity: Powerful templates, IDEs, Angular CLI

		- Full Stack Development:  Testing, Animation Support, Accessibility

		 It provides full stack development along with Node.js, Express.js, and MongoDB.

	//-------------------------------------------------------------------------------------- 

	- History and different versions of Angular
	============================================

		-  first version of Angular was Angular1.0 (also known as AngularJS) which was released in 2010.

		- Angular 2.0 was first introduced in October 2014. It was a complete rewrite of AngularJS

		- Angular 4 version was announced on 13 December 2016

		- Angular5 version was released on 1 Nov, 2017

		- Angular 7 released on October 18, 2018

		For more. https://github.com/angular/angular/blob/master/CHANGELOG.md

	//--------------------------------------------------------------------------------------

	Environment Setup
	==================

		- Install VS Code or JetBrains WebStorm

		- Install NodeJs ( https://nodejs.org/en/ )

			open command prompt and run following command to check the installation is successful or not

			C:\Users\archer>node -v
				v14.18.1

		- Visit the https://angular.io/resources

		- Install the Angular CLI

				Angular CLI to create projects, generate application and library code, and perform a variety of ongoing development tasks such as testing, bundling, and deployment.

				C:\Users\archer>npm install -g @angular/cli

		- Create a workspace and First Application (Created F:\angular)

				F:\angular>ng new first-ng-app

				 - hit N to Routing
				 - CSS hit enter key

		- After compliation run dir commad to see the files


			F:\angular>dir
			 Volume in drive F has no label.
			 Volume Serial Number is E0E2-42AB

			 Directory of F:\angular

			27-10-2021  01:33    <DIR>          .
			27-10-2021  01:33    <DIR>          ..
			27-10-2021  01:38    <DIR>          first-ng-app

		- open project dir and run code . to open the project in the VS Code

			F:\angular\first-ng-app>code .


		- Run the project using the command

				F:\angular\first-ng-app>ng serve --open 


		- To See information about the Workspace and project file structure just visit 

			https://angular.io/guide/file-structure

	//-------------------------------------------------------------------------------------

		 Why does Angular need Node.js?
		---------------------------------

		Angular does not need node.js directly. Node js is used for all the build and development tools.

		It is not mandatory to use node.js for developing angular application. You can very well go ahead without node.js for developing angular application but it would not be wise to do so. Let me explain you some of the reasons how node.js makes angular app development process easier for us:

		Node allows you to spin up a lightweight web server to host your application locally in your system.
		NPM (Node Package Manager) comes with node.js by default. NPM allows you to manage your dependencies. So, you don’t have to worry for operations like adding a dependency, removing some, updating your package.json.

		Third and the most important, npm gives you angular cli or ng cli(angular command line interface) . Angular CLI is a great tool for scaffolding your application. So, you don’t need to write boilerplates manually.

		Angular recommends the use of TypeScript. Now, your browser does not understand TypeScript. It needs to be transpiled*** to JavaScript. Also, you need to bundle your js files and stylesheets together with the html doc so as to get the web app CLI which is ready to be hosted. Angular CLI helps you to do all these behind the scene. By default, ng cli uses webpack for bundling your application and is very helpful for beginners who have just jumped into web development with angular as it abstracts such complexities.

	*** Transpiling is a specific term for taking source code written in one language and transforming into another language

	//----------------------------------------------------------------------------------


		// NPM - Node Package Manager
		-------------------------------

		Node Package Manager (NPM) is a command line tool that installs, updates or uninstalls Node.js packages in your application. It is also an online repository for open-source Node.js packages. The node community around the world creates useful modules and publishes them as packages in this repository.

			NPM is included with Node.js installation. After you install Node.js, verify NPM installation by writing the following command in terminal or command prompt.

				c:\> npm -v

			There are many things that npm does.

				- npm manages downloads of dependencies of your project.

				- Installs a single package

				- Updating is also made easy, by running npm update

				- In addition to plain downloads, npm also manages versioning.

				- Running Tasks: The package.json file supports a format for specifying command line tasks that can be run by using npm run <task-name>

	//-------------------------------------------------------------

	// What is the use of polyfills.ts file in Angular?

		Angular is built on the latest standards of the web platform. Targeting such a wide range of browsers is challenging because they do not support all features of modern browsers.

		You can compensate them by loading polyfill scripts on the host web page that implement missing features in JavaScript.

		Some features of angular may require additional polyfills

		For ex. Animation library relies on the standard web animation API, which is only available in chrome and Firefox today. You will need a polyfill to use animations in other browsers.

	//-------------------------------------------------------------------------------

		// What is module bundler?


		Module bundlers are tools for frontend developers used to bundle JavaScript modules into a single JavaScript files that can be executed in the browser.

		Examples of modern module bundlers are: webpack, rollup, fusebox, parcel, etc.

		Module bundler is required because:

		Browser does not support module system, although this is not entirely true nowadays
		
		It helps you manage the dependency relationship of your code, it will load modules in dependency order for you.

		It helps you to load your assets in dependency order, image asset, css asset, etc.

//------------------------------------------------------------------------------------------

		// What Is Lint Code? And Why Is Linting Important?

		Everyone knows that programming errors are bad. Some errors cause glitches that frustrate users. Others compromise the safety and security of a critical system. No matter what type of program you’re developing, avoiding these errors is important. That’s why many development teams rely on linting.

		Linting is the automated checking of your source code for programmatic and stylistic errors. This is done by using a lint tool (otherwise known as linter). A lint tool is a basic static code analyzer.

		Linting is important to reduce errors and improve the overall quality of your code. Using lint tools can help you accelerate development and reduce costs by finding errors earlier.


	// ==================================================================================

		TypeScript: just ref the Git repo.

	// ==================================================================================

		// Default Folder Structure 

 
		1. node_module: 
			- Provides npm packages to the entire workspace. Workspace-wide node_modules dependencies are visible to all projects.
			- This is the folder where all modules and libraries resides
			- Add/Remove the module packages
			- We will not touch this folder for development purpose.

		2. src:
			- This is the main work area/ app code resides inside this folder
			- Source files for the root-level application project.
				- app : Contains the component files in which your application logic and data are defined.
					- app.component : file curresponds to component
					- app.module.ts : It means this is module (collection of component, services, pipe etc)
					- app.component.spec.ts : These are unit test scripts
					- app.component.css : css file for perticular component.
					- app.component.html : html file for perticular component

				- assets : Contains image and other asset files to be copied as-is when you build your application.
				- environments: 
						Contains build configuration options for particular target environments. By default there is an unnamed standard development environment and a production ("prod") environment. You can define additional target environment configurations.
				- favicon.ico : An icon to use for this application in the bookmark bar.

				- index.html	
						The main HTML page that is served when someone visits your site. The CLI automatically adds all JavaScript and CSS files when building your app, so you typically don't need to add any <script> or <link> tags here manually.

				- main.ts	
						The main entry point for your application. Compiles the application with the JIT compiler and bootstraps the application's root module (AppModule) to run in the browser. 

				- polyfills.ts : Provides polyfill scripts for browser support. (make backward compatable)

				- styles.sass	
						Lists CSS files that supply styles for a project. The extension reflects the style preprocessor you have configured for the project.

				- test.ts	
						The main entry point for your unit tests, with some Angular-specific configuration. You don't typically need to edit this file.
		
		3. .browserslistrc
				 Share target browsers between different front-end tools, like Autoprefixer, Stylelint and babel-preset-env

		4. .editorconfig: 
				EditorConfig helps maintain consistent coding styles for multiple developers working on the same project across various editors and IDEs. The EditorConfig project consists of a file format for defining coding styles and a collection of text editor plugins that enable editors to read the file format and adhere to defined styles. EditorConfig files are easily readable and they work nicely with version control systems.

		5. .gitignore
				Specifies intentionally untracked files that Git should ignore.

		6. angular.json
				CLI configuration defaults for all projects in the workspace, including configuration options for build, serve, and test tools that the CLI uses, such as TSLint, Karma, and Protractor

		7. karma.conf.js: Karma Runner for out unit test scripts.

		8. package-lock.json
				Provides version information for all packages installed into node_modules by the npm client. 

		9. package.json
				Configures npm package dependencies that are available to all projects in the workspace. 

		10. README.md
				Introductory documentation for the root application.

		11. tsconfig.app.json
				Application-specific TypeScript configuration, including TypeScript and Angular template compiler options.

		12. tsconfig.json
				The base TypeScript configuration for projects in the workspace. All other configuration files inherit from this base file.

		13. tsconfig.spec.json
				TypeScript configuration for the application tests

		14. tslint.json	
				Application-specific TSLint configuration.


//----------------------------------------------------------------------------------------------------
	
		// Exact working of your angulat project: 

				Diagram

//=========================================================================================================

	//  Todo app  -- Application


		- create the new application using command (f:\angular)

			F:\angular>ng new todo-app

				-> say no to routing
				-> select CSS as style

				(The Angular CLI Will Create the project with std file structure)


		- open the project folder and again open it with vs code

			F:\angular>cd todo-app

			F:\angular\cd todo-app>code .

			F:\angular\cd todo-app>ng serve



	- Two json files
		- package.json:
		- angular.json:

	- src:
		- index.html
		- main.ts
		- styles.css

		- app: you can add more component here.

			for each component: 
				- app.component.css 	- style
				- app.component.html 	- structure
				- app.component.ts 		- logic
				- app.component.spec.   - Testing

			- module.ts

		- The app.component is the brain, variable defined over here can be accessed in the app.component.html using the javascript expression {{title}}

			- Note the variables from AppComponent are directly accessible in the app.component.html with the help of javascript expression


		- Add css to app.component.css


.logo {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.input-text {
  display: inline;
  margin: 0;
  border: none;
  border-radius: 0.4rem;
  padding: 10px;
}

.list ul li button {
  position: absolute;
  right: 0%;
  background: #f34541;
  color: #fff !important;
  text-transform: uppercase;
  text-decoration: none;
  margin-left: 10px;
  margin-right: 10px;
  padding: 10px;
  border-radius: 0.4rem;
  display: inline-block;
  border: none;
}

.add-btn {
  color: #fff !important;
  text-transform: uppercase;
  text-decoration: none;
  background: #7313cb;
  margin: 20px;
  padding: 10px;
  border-radius: 0.4rem;
  display: inline-block;
  border: none;
}

.app-title {
  text-align: center;
  color: #c1c1c1;
  font-size: 70px;
}
ul {
  /* remove default padding and margin from ul*/
  margin: 0px;
  padding: 0px;
}
.list ul li {
  display: block;
  width: 100%;
  text-decoration: none;
  color: #000000;
  background-color: #ffffff;
  line-height: 30px;
  border-bottom-style: solid;
  border-bottom-width: 1px;
  border-bottom-color: #cccccc;
  padding: 10px;
  position: relative;
}

.container {
  color: #fff;
  max-width: 500px;
  margin: auto;
}



	- copy the logo (logo.png) in the assets folder

	- open the app.component.html, delete all the contents

	- Now We have to write our own code


<div style="text-align: center">
  <img
    src="../assets/logo.png"
    alt="Logo"
    width="100"
    height="100"
    class="logo"
  /> 
  <h1 class="app-title"> Todo List </h1>
</div>

<div class="container">
  Add todo ....
  <br />
  <input type="text" class="input-text"  placeholder="Type a Todo" 
  [(ngModel)]="todovalue"
  (keyup.enter)="addItem()"
  />
  <button class="add-btn" (click)="addItem()">Add Todo</button>

  <div class="list">
    <ul>
       <li *ngFor="let item of list">
       <input type="checkbox" name="isDone" [(ngModel)]="item.isDone"/> 
        {{item.value}}
        <button class="btn" (click)="deleteItem(item.id)"> Delete </button>
      </li> 
    </ul>
  </div>
</div>


	- create the todo.ts in app folder, write the interface over there

		export interface Todo {
		    id: number;
		    value: string;
		    isDone: boolean;
		}


	- Import above tot in app.component, and Write a methids to insert and delete the items

import { Component } from '@angular/core';
import { Todo } from "./todo";
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'first-ng-app';
  todovalue : string = "";
  list : Todo[] = [];

  ngOnInit(){
    this.list = [];
    this.todovalue = "";
  }

  addItem(){
    if(this.todovalue==""){
      const newItem : Todo ={
        id : Date.now(),
        value : this.todovalue,
        isDone : false
      };
      this.list.push(newItem);
      console.log(this.list);
    }
    this.todovalue="";
  }

  deleteItem(id : number){
    this.list = this.list.filter( item => item.id !==id);
  }
}

	

	- add the formmodule in imports of file app.module.ts

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppComponent } from './app.component';
import { FormsModule } from '@angular/forms';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    FormsModule,
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }


	- Save all files and use ng serve to run the code

	//===================================================================================================================


		- Module: 

			A module is a software component or part of a program that contains one or more routines. One or more independently developed modules make up a program. An enterprise-level software application may contain several different modules, and each module serves unique and separate business operations.

				Means Simply Collection of Things

			An Angular app is made up of three types of artifacts: components (which includes directives and pipes), child modules, and services. An Angular module encapsulates these artifacts as one compilation unit.
	

			Modules are a way to organize an app and extend its capabilities with external libraries. Angular libraries are also built using Angular modules. Examples include FormsModule, HttpClientModule, and RouterModule. Many external libraries are also available as Angular modules, for example, Material Design, Ionic, and AngularFire2.

			Angular components, directives, and pipes focus on particular feature areas, business domains, workflows, or common utilities. Angular services might be internally developed, like something you'd develop for yourself, or can be imported from external sources, such as the Angular router and HTTP client.

				( * Pipes are for formatting data, and directives are to alter the behavior/appearance of 
				    an element
				  * Routing basically means navigating between pages
				)


			Modules can be eagerly loaded when the app starts or lazily loaded asynchronously by the router.


			- An Angular Module's Metadata:
			------------------------------

			An Angular module's metadata, which is specified using the @NgModule decorator, does the following:

				- Declares which components, directives, and pipes belong to the module

				- Makes some of those components, directives, and pipes public so that other module's component templates can use them.

				- Imports other modules with the components, directives, and pipes that components in the current module need

				- Provides services that other app components 


			Every Angular app has at least one module, which is called the root module or app-level module. You bootstrap this app-level module or root module to launch the application.

			Root Module: 
	
			import { BrowserModule } from '@angular/platform-browser';
			import { NgModule } from '@angular/core';

			import { AppComponent } from './app.component';

			// @NgModule decorator with its metadata
			@NgModule({
			  declarations: [AppComponent],
			  imports: [BrowserModule],
			  providers: [],
			  bootstrap: [AppComponent]
			})
			export class AppModule {}


			Notice that in the NgModule directive, you are passing an object that has the following four array type properties:

			- declarations: In this array, you specify which components, directives, and pipes belong to this module.

			- imports: In this array, you import eagerly loaded modules.
			
			- providers: In this array, you specify all the services that can be used across the app in any component, directive, or pipe.

			- bootstrap: In this array, you specify the component that should be loaded at the start of the app.



			Any feature module will have the first three arrays (declarations, imports, providers) but not the fourth array (bootstrap).

		In a small app, the root module or app-level module is enough to organize different components, directives, pipes, and services. But as the app grows, you should refactor the root module into feature modules, which represents related functionality. You may then import these modules in the app-level module if you want these modules to be eagerly loaded or in the routing module through routes if you want them to be lazily loaded.



		- What is {Eager Loading, Lazy Loading, Pre-Loading} in Angular?

			1. What is Eager Loading?
			Feature modules under Eager Loading would be loaded before the application starts. This is the default module-loading strategy.
			
			2. What is Lazy Loading?
			Feature modules under Lazy Loading would be loaded on demand after the application starts. It helps to start application faster.
			
			3. What is Pre-Loading?
			Feature Modules under Pre-Loading would be loaded automatically after the application starts


		- Types of Feature Modules
		---------------------------

		There are following types of feature modules:

			- Domain Feature Modules
			- Routed Feature Modules
			- Routing Modules
			- Service Feature Modules
			- Widget Feature Modules
			- Shared Feature Modules


			- Domain Feature Modules

			The user experience, such as editing an event or placing an order, for a particular app is delivered by a domain feature module.

			Domain feature modules rarely have providers. If they have providers, the lifetime of the provided services should be the same as the lifetime of the module. Domain feature modules are imported exactly once by a larger feature module.

			They might be imported by the root AppModule of a small application that lacks routing.

				- Routed Feature Modules

			In routed feature modules, the top components are the targets of router navigation routes. Their components never appear in the template of an external component. Routed feature modules rarely have providers. If they have providers, the lifetime of the provided services should be the same as the lifetime of the module.

				- Routing Modules

			The routing module define routes and provides the routing configuration. It adds router configuration to the module's import and separates routing concerns from its companion module. A routing module should only be imported by its companion module, and it does not have its own declarations.

				- Service Feature Modules

			Utility services such as messaging and accessing data are provided by service feature modules. These modules consist of providers only and have no declarations. The root AppModule is the only module that should import service modules.

				- Widget Feature Modules

			Components, directives, and pipes are made available to external modules using widget feature modules. A widget feature module consists entirely of declarations and rarely has any providers.

				- Shared Feature Modules: 

			A shared NgModule makes a set of components, directives, and pipes available to other NgModules.



		//-------------------------------------------------------------


		- Creating your Own Module:

		- Run the command

				> ng generate module student  (or ng g m student)

					It will create the module student under the src/app/student having file student.ts

					import { NgModule } from '@angular/core';
					import { CommonModule } from '@angular/common';

					@NgModule({
					  declarations: [],
					  imports: [
					    CommonModule
					  ]
					})
					export class StudentModule { }


			- Now Just import the module into the app module(root module), There are two ways, lets see first manually

			- open the app.module.ts and import the StudentModule and add StudentModule in to imports array

				import { NgModule } from '@angular/core';
				import { BrowserModule } from '@angular/platform-browser';
				import { StudentModule } from './student/student.module';
				import { AppComponent } from './app.component';

				@NgModule({
				  declarations: [
				    AppComponent
				  ],
				  imports: [
				    BrowserModule,
				    StudentModule
				  ],
				  providers: [],
				  bootstrap: [AppComponent]
				})
				export class AppModule { }


	//-----------------------------------------------------------------------------------------------

		// Using Components in Angular

				An Angular app is made up of three types of artifacts: components (which includes directives and pipes), child modules, and services. An Angular module encapsulates these artifacts as one compilation unit.

				Note that the collection of component is webpage. there are two different
				approches of page design:

					- Traditional Approch (DOM Based):

						- First you have to write the html which is the static portion of your application.

						- Then you have to write the JavaScript which is the dynamic portion of your application.

							JavaScript is embeeded into the html and when the html loads, javascript also gets loaded. Javascript manipulates the DOM and you will get the dynamic functionality.

							Means, There is implicit divide.

						suppose, you want to display the date and time

				html 									JavaScript

	- Create the <div> and <p>					- code to get the date and time
	- Add button 								- update the <p> DOM Element
												- Need the function to handle the button click


			<html>
				<head>
					<script>
						function printDate(){
							const d=new date();
							document.getElementById("demo").innerHTHL=d;
						}
					</script>
				</head>

				<body>
					<h2> Date and Time Display </h2>
					<p id="demo"> display here </p>
					<button onclick="printdate()"> Cilck Me </buttion>
				</body>
			</html>


	//--------------------------------------------------------------------------------

		- Component based Approch:
		The concept of component-based design envisions building websites out of ready-made elements (components), which are designed and programmed segments to be used as building blocks for your website. What is more, thanks to their modular nature, they can be easily reused on all subpages. 

			fig. cmpmodel


			which you can assemble in various ways to build your subpages by composing and arranging them in various ways in order to achieve the desired goal. A component is like a ready-made element, which you can fill with any content or add graphic elements to it. What is more, components are not tied to specific subpages, which means that you can use them throughout your website. Examples of such components include text blocks, a photo banner, a contact form, or a call-to-action block.


			- Advantages of using component-based websites include:
			-------------------------------------------------------

				- One of the most important ones is definitely versatility in reusing these building blocks since they enable you to freely shape and rearrange your website

				- By building a component-based website, in reality, you’re building a website management system.
			
				- reusing components on various subpages, all changes in design or code modifications of a given element are easier

				- minimising the cost of managing the website, as well as introducing changes in the content and structure of its subpages,
				
				- simplicity and intuitiveness of the components and their use

				- ease of adding new blocks to a website based on ready-made components, enabling easy expansion according to the needs and demands

				- easy website administration and management in companies, where component-based websites can be managed by a group of people. 


			- Creating our Own Component: 

				A component controls a patch of screen called a view.

				or 
				
				The component is a self-sufficient piece of a web application that can be plugged into anywhere, that knows what to do.


					fig. component_arc



				>ng generate component clock (will create the component in the app)


				project : module-component-demo






































